const w=(a,e="*")=>{figma.ui.postMessage(a,{origin:e})},F=(a,e,o="*")=>{w({event:a,data:e},o)},b=(a,e,o=!1)=>{const i=n=>{n.event===a&&(e(n),o&&figma.ui&&figma.ui.off("message",i))};figma.ui.on("message",i)};function $(a){if(Array.isArray(a)&&a.length>0&&typeof a[0]=="object"){const e=a[0];if("url"in e&&"filename"in e)return console.log(`🔗 Found image URL: ${e.url}`),{fieldName:e.filename,attachment:e}}return null}function A(a){const e=[];return Object.entries(a).forEach(([o,i])=>{const n=$(i);n&&(console.log(`🖼️ Found image field "${o}":`,n),e.push({fieldName:o,imageUrl:n.attachment.url}))}),e}figma.showUI(__html__,{themeColors:!0,width:400,height:200});console.log("🟢 Mooco Plugin is online");async function L(a){const e=figma.root.children.find(n=>n.name===a);if(e)return console.log(`📄 Found existing page: ${a}`),e;const o=figma.root.children.find(n=>n.name==="Main Template");if(!o)throw new Error("❌ Main Template page not found");const i=o.clone();return i.name=a,console.log(`✨ Created new page from template: ${a}`),i}async function I(a,e){const o=a.findOne(i=>i.type==="FRAME"&&i.name===e);return o?(console.log(`🎯 Found frame: ${e}`),o):(console.warn(`⚠️ Frame not found: ${e}`),null)}function p(a){let e=[];if(a.type==="TEXT"&&e.push(a),"children"in a)for(const o of a.children)e=e.concat(p(o));return e}figma.ui.onmessage=async a=>{if(a.type==="save-credentials")try{await figma.clientStorage.setAsync("airtableToken",a.credentials.airtableToken),await figma.clientStorage.setAsync("airtableBaseId",a.credentials.airtableBaseId),figma.ui.postMessage({type:"credentials-saved"})}catch(e){figma.ui.postMessage({type:"error",message:e.message})}else if(a.type==="get-credentials")try{const e=await figma.clientStorage.getAsync("airtableToken"),o=await figma.clientStorage.getAsync("airtableBaseId");figma.ui.postMessage({type:"credentials-loaded",credentials:{airtableToken:e,airtableBaseId:o}})}catch(e){figma.ui.postMessage({type:"error",message:e.message})}else if(a.type==="fetch-airtable-data")try{const e=await figma.clientStorage.getAsync("airtableToken"),o=await figma.clientStorage.getAsync("airtableBaseId"),i=await fetch(`https://api.airtable.com/v0/${o}/001`,{headers:{Authorization:`Bearer ${e}`}});if(!i.ok)throw new Error(`Airtable API error: ${i.status}`);const n=await i.json(),d=await Promise.all(n.records.map(async u=>{const s={};Object.entries(u.fields).forEach(([f,l])=>{const c=f.toLowerCase().replace(/\s+/g,"");s[c]=l});const m=A(s);if(m.length>0&&(console.log(`📸 Found ${m.length} image fields in record:`,m),s.imageFields=m),s.filename&&s.version){const f=await L(s.filename),l=await I(f,s.version);if(l){const c=p(l);console.log("🔍 Found text layers:",c.map(t=>t.name));for(const t of c){const r=t.name.toLowerCase().replace(/\s+/g,"");if(s[r]!==void 0){console.log(`✏️ Updating layer "${t.name}" with value:`,s[r]),await figma.loadFontAsync({family:t.fontName.family,style:t.fontName.style});const g=s[r].toString().replace(/\\n/g,`
`).replace(/\\r\\n/g,`
`).replace(/\\r/g,`
`);t.characters=g}}if(s.imageFields&&s.imageFields.length>0){console.log(`🎨 Processing images for frame: ${l.name}`);for(const t of s.imageFields)try{console.log(`🔍 Looking for image layer "${t.fieldName}"`);const r=l.findOne(g=>g.type==="RECTANGLE"&&g.name.toLowerCase().replace(/\s+/g,"")===t.fieldName.toLowerCase().replace(/\s+/g,""));if(r){console.log(`📥 Updating image in layer "${r.name}" with URL: ${t.imageUrl}`);const y=await(await fetch(t.imageUrl)).arrayBuffer(),h=figma.createImage(new Uint8Array(y));r.fills=[{type:"IMAGE",scaleMode:"FILL",imageHash:h.hash}],console.log(`✅ Image "${t.fieldName}" updated successfully`)}else console.log(`⚠️ No matching image layer found for "${t.fieldName}"`)}catch(r){console.error(`❌ Failed to process image "${t.fieldName}":`,r)}}s.textLayers=c.map(t=>({name:t.name,id:t.id,updated:s[t.name.toLowerCase().replace(/\s+/g,"")]!==void 0}))}}return s}));console.log("All records processed:",d),figma.ui.postMessage({type:"airtable-data",data:d})}catch(e){console.error("Error:",e),figma.ui.postMessage({type:"error",message:e.message})}};b("hello",a=>{console.log("code.ts"),alert(`Hello ${a.string}`),F("helloCallback",{result:!0})});
